#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

echo "X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fICAgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX1
9fX19fX19fX19fX19fX19fX19fX19fX19fX19fXw0KNyAgICAgNzcg
IDcgIDc3ICBfICA3NyAgICAgNzcgICAgIDc3ICA3ICAgNyAgXyAgNz
cgIF8gIDc3ICAgICA3NyAgXyAgNzcgIF8gIDc3ICAgICAgNzcgICAg
IDc3ICBfICA3NyAgNyAgNw0KfCAgLSAgfHwgICEgIHx8ICAgIF98fC
AgNyAgfHwgIF8gIHx8ICB8ICAgfCAgXyAgfHwgICBfX3x8ICA3ICB8
fCAgICBffHwgIF8gIHwhX18gIF9fIXwgIDcgIHx8ICAgIF98fCAgIS
AgfA0KfCAgX19fISFfICAgXyF8ICBfIFwgfCAgfCAgfHwgIDcgIHx8
ICAhX19ffCAgNyAgfHwgIF8gIHx8ICB8ICB8fCAgXyBcIHwgIDcgIH
wgIDcgIDcgIHwgIHwgIHx8ICBfIFwgIV8gICBfIQ0KfCAgNyAgICA3
ICAgNyB8ICA3ICB8fCAgISAgfHwgIHwgIHx8ICAgICA3fCAgfCAgfH
wgIDcgIHx8ICAhICB8fCAgNyAgfHwgIHwgIHwgIHwgIHwgIHwgICEg
IHx8ICA3ICB8IDcgICA3IA0KIV9fISAgICAhX19fISAhX18hX18hIV
9fX19fISFfXyFfXyEhX19fX18hIV9fIV9fISFfX19fXyEhX19fX18h
IV9fIV9fISFfXyFfXyEgICFfXyEgICFfX19fXyEhX18hX18hICFfX1
8hIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC
AgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA==" |base64 -d

echo -en '\n'

# Fail fast
set -e

# Debug
# set -x

# Parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

# Config
# Hardcoded available stable versions
# Use it to manually update the version as per https://firefox-source-docs.mozilla.org/testing/geckodriver/Support.html
VERSION_FIREFOX=82.0.3
VERSION_GECKODRIVER=0.28.0
LANG=en-US
PLATFORM=linux64

# Install correct dependencies according to $STACK	
case "$STACK" in	
  "heroku-16" | "heroku-18" | "heroku-20" | "heroku-22")	
    PACKAGES="	
      tesseract-ocr
      libtesseract-dev
      tesseract-ocr-fra
    "
    ;;	
  *)	
    error "Heroku stack must be 'heroku-16', heroku-18 or 'heroku-20 or 22'"	
esac

if [ ! -f $CACHE_DIR/PURGED_CACHE_V1 ]; then
  echo "Purging cache"
  rm -rf $CACHE_DIR/apt
  rm -rf $CACHE_DIR/archives
  rm -rf $CACHE_DIR/lists
  touch $CACHE_DIR/PURGED_CACHE_V1
fi

echo "Installing correct dependencies."

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

echo "Updating apt caches"
apt-get $APT_OPTIONS update | indent

for PACKAGE in $PACKAGES; do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    echo "Fetching $PACKAGE"
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    echo "Fetching .debs for $PACKAGE"
    apt-get $APT_OPTIONS -y -d install --reinstall $PACKAGE | indent
  fi
done

mkdir -p $BUILD_DIR/.apt
